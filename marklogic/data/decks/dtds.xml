<?xml version="1.0" encoding="UTF-8"?><p:div xmlns="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.corbas.co.uk/ns/presentations">

	<p:meta>
		<p:id>dtd-intro</p:id>
		<p:keyword>Schema</p:keyword>
		<p:keyword>DTD</p:keyword>
		<p:keyword>XML</p:keyword>
		<p:level>Intermediate</p:level>
	</p:meta>
	
	<p:title>DTDs</p:title>

	<p:slide xml:id="d1e24">
		<p:title>DTDs</p:title>
		<p>Document Type Definitions (DTDs) are <em>very</em> old technology.</p>
		<p>DTDs were first introduced with SGML in the early 1970s.</p>
		<p>When XML was created in the late 90s they were the best approach available.</p>
		<p>The basics of DTD authoring can be learned in around an hour and everything in a day.</p>
	</p:slide>

	<p:slide xml:id="d1e45">
		<p:title>Advantages and disadvantages</p:title>
		<h3>Advantages</h3>
		<ul>
			<li>They've been around a while</li>
			<li>Relative simplicity</li>
			<li>Ubiquity</li>
		</ul>
		
		<h3>Disadvantages</h3>
		<ul>
			<li>Limited expressiveness</li>
			<li>No support for namespaces</li>
			<li>Not written in XML</li>
		</ul>
	</p:slide>

	<p:slide xml:id="d1e81">
		<p:title>Definition vs Declaration</p:title>
		<p>A Document Type Declaration (annoyingly, also DTD) relates an XML document to its Document Type Definition.</p>
		<p>The declaration appears immediately before the root element</p>
		<p>May contain either PUBLIC or SYSTEM identifiers</p>
	</p:slide>

	<p:slide xml:id="d1e97">
		<p:title>Example</p:title>
		<p:code type="text"> &lt;!DOCTYPE art SYSTEM "http://www.biomedcentral.com/xml/article.dtd"&gt; &lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook
			XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"&gt; </p:code>
	</p:slide>

	<p:slide xml:id="d1e106">
		<p:title>System identifiers</p:title>
		<p>DTDs with SYSTEM identifiers are the simpler of the two forms</p>
		<p>The declaration breaks down into:</p>
		<ul>
			<li>DOCTYPE</li>
			<li>
				<em>Root element name</em>
			</li>
			<li>SYSTEM</li>
			<li>
				<em>URL for the DTD</em>
			</li>
		</ul>
		<p:code type="text">&lt;!DOCTYPE art SYSTEM "http://www.biomedcentral.com/xml/article.dtd"&gt; </p:code>
	</p:slide>

	<p:slide xml:id="d1e142">
		<p:title>Public identifiers</p:title>
		<ul>
			<li>Intended to be used for look-up systems</li>
			<li>Allow a local lookup for the DTD</li>
		</ul>
		<p> </p>
		<p:code type="text">&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"&gt;</p:code>
	</p:slide>

	<p:slide xml:id="d1e163">
		<p:title>Why use DTDs?</p:title>
		<ul>
			<li>DTDs are quite limited but very suitable for text processing.</li>
			<li>DTDs only know about text data and a few specialised data types — no numbers, no dates.</li>
			<li>DTDs cannot specify that (e.g.) “an abstract contains no more than four paragraphs”. If the business rules require that then Schematron is a
				good solution. DTDs can specify: <ul>
					<li>zero or one</li>
					<li>one or more</li>
					<li>zero or more</li>
				</ul>
			</li>
			<li>Unlike other schema languages, DTDs effectively specify default values for attributes.</li>
		</ul>
	</p:slide>

	<p:slide xml:id="d1e196">
		<p:title>What is a DTD?</p:title>
		<p>A grammar for an XML language</p>
		<ul>
			<li>Usually abbreviated to <em>DTD</em>s</li>
			<li>Not written in XML</li>
			<li>Original schema language for XML</li>
		</ul>
		<h2>Document Type Definitions</h2>
		<ul> </ul>
	</p:slide>

	<p:slide xml:id="d1e226">
		<p:title>What do they do?</p:title>
		<p>Define the structural relationship between <em>elements</em>
		</p>
		<ul>
			<li>Define where <em>text</em> may appear</li>
			<li>Define the <em>attributes</em> associated with elements</li>
			<li>Define <em>entities</em>
			</li>
		</ul>
	</p:slide>

	<p:slide xml:id="d1e260">
		<p:title>Example</p:title>
		<p:code type="text"> &lt;!-- A document consists of a title followed by one or more sections --&gt; &lt;!ELEMENT document (title, section+)&gt;
			&lt;!-- A document has attributes - a document version and a language (which may be one of a few choices defaulting to English) --&gt;
			&lt;!ATTLIST document version CDATA #REQUIRED language (en | fr | de | it | sp) "en" &gt; &lt;!-- A title is just text --&gt; &lt;!ELEMENT title
			(#PCDATA)&gt; &lt;!-- A section consists of either one or more paras followed by zero or more sections or one or more sections --&gt;
			&lt;!ELEMENT section (title, ((para+, section*) | section+))&gt; &lt;!-- A paragraph consists of text --&gt; &lt;!ELEMENT para (#PCDATA)&gt;
		</p:code>
	</p:slide>

	<p:slide xml:id="d1e269">
		<p:title>Text in a DTD</p:title>
		<ul>
			<li>Text in a DTD is PCDATA</li>
			<li>The data type keyword is <code>#PCDATA</code>
			</li>
			<li>We talked earlier about PCDATA and CDATA </li>
		</ul>
	</p:slide>

	<p:slide xml:id="d1e290">
		<p:title>Element Definition</p:title>
		<p>DTDs define elements as:</p>
		<div class="code-sample verbatim-default">   </div>
		<p:code type="text"> &lt;!ELEMENT name (definition)&gt; &lt;!-- for example --&gt; &lt;!ELEMENT para (#PCDATA)&gt; </p:code>
	</p:slide>

	<p:slide xml:id="d1e305">
		<p:title>Quantifiers</p:title>
		<p> The number of times an element may occur is defined using: </p>
		<table>
			<tbody>
				<tr>
					<th>Quantifier</th>
					<th>Meaning</th>

				</tr>
				<tr>
					<td>
						<em>none</em>
					</td>
					<td>one only (default)</td>

				</tr>
				<tr>
					<td>+</td>
					<td>one or more</td>

				</tr>
				<tr>
					<td>*</td>
					<td>zero or more</td>
				</tr>
				<tr>
					<td>?</td>
					<td>zero or one</td>
				</tr>
			</tbody>
		</table>
	</p:slide>

	<p:slide xml:id="d1e368">
		<p:title>Sequencing</p:title>
		<p>The way elements are sequenced can be controlled: </p>
		<p:code type="text">&lt;!ELEMENT section (para | list | table)+&gt; </p:code>
		<ul>
			<li>Elements can be grouped and treated as one</li>
			<li> We can use quantifiers on the groups </li>
		</ul>
		<table>
			<tbody>
				<tr>
					<th>Quantifier</th>
					<th>Meaning</th>
				</tr>
				<tr>
					<td>
						<strong>, </strong>
					</td>
					<td>Sequence</td>
				</tr>
				<tr>
					<td>|</td>
					<td>Alternation</td>
				</tr>
			</tbody>
		</table>
	</p:slide>

	<p:slide xml:id="d1e425">
		<p:title>Empty content models</p:title>
		<ul>
			<li>We can define elements as empty <ul>
					<li>they can have no content at all</li>
				</ul>
			</li>
		</ul>
		<p> </p>
		<p:code type="text">&lt;!ELEMENT img EMPTY&gt;</p:code>
	</p:slide>

	<p:slide xml:id="d1e450">
		<p:title>ANY</p:title>
		<ul>
			<li>The ANY keyword allows <ul>
					<li>any number of </li>
					<li>elements defined in the DTD</li>
				</ul>
			</li>
		</ul>
		<p:code type="text">&lt;!ELEMENT div ANY&gt;</p:code>
	</p:slide>

	<p:slide xml:id="d1e474">
		<p:title>Grouping</p:title>
		<ul>
			<li>DTD components may be grouped</li>
			<li>Use parentheses to group:</li>
		</ul>
		<p:code type="text"> </p:code>
	</p:slide>

	<p:slide xml:id="d1e492">
		<p:title>Elements have attributes</p:title>
		<p>DTDs define attributes using the <code>ATTLIST</code> syntax</p>
		<p:code type="text">&lt;!ATTLIST document version CDATA #REQUIRED language (en | fr | de | it | sp) "en"&gt; </p:code>
		<p>Additional keywords are used to specify</p>
		<ul>
			<li>Type</li>
			<li>Defaults</li>
			<li>Occurrence</li>
		</ul>
	</p:slide>
	<p:slide xml:id="d1e522">
		<p:title>Attributes can have types</p:title>
		<ul>
			<li>CDATA</li>
			<li>A sequence of values</li>
			<li>ID/IDREF/IDREFS</li>
			<li>NMTOKEN/NMTOKENS</li>
			<li>ENTITY/ENTITIES</li>
			<li>NOTATION</li>
		</ul>
		<p>Nothing <em>specific</em> like numbers/dates/etc</p>
	</p:slide>
	<p:slide xml:id="d1e556">
		<p:title>CDATA and choices</p:title>
		<ul>
			<li>CDATA attributes are simple text <ul>
					<li>Similar requirements to element's PCDATA</li>
					<li>When we use a choice —  <code>(en | fr | de | it | sp)</code> — the data itself is CDATA</li>
				</ul>
			</li>
		</ul>
		<p:code type="text">&lt;!ATTLIST document version CDATA language (en | fr | de | it | sp) "en"&gt; </p:code>
	</p:slide>
	<p:slide xml:id="d1e583">
		<p:title>NMTOKEN/NMTOKENS</p:title>
		<ul>
			<li>The value of an NMTOKEN typed attribute must be a valid XML name token</li>
			<li>NMTOKENS requires a whitespace separated list of NMTOKEN values</li>
		</ul>
		<p:code type="text">&lt;!ATTLIST listitem marker NMTOKEN "bullet"&gt; &lt;!-- valid --&gt; &lt;listitem marker="bullet"&gt;…&lt;/listitem&gt;
			&lt;!-- invalid --&gt; &lt;listitem marker="3"&gt;…&lt;/listitem&gt;</p:code>
	</p:slide>
	<p:slide xml:id="d1e602">
		<p:title>Defined…</p:title>
		<p:code type="text"> NameStartChar ::= ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#]|
			[#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF] NameChar ::=
			NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040] Nmtoken ::= (NameChar)+ </p:code>
	</p:slide>
	<p:slide xml:id="d1e611">
		<p:title>ID or IDREF/IDREFS</p:title>
		<ul>
			<li>ID typed attributes indicate that the validator must check that <ul>
					<li>the value is an Name (almost the same as an NMTOKEN) </li>
					<li>it is unique with the document</li>
				</ul>
			</li>
			<li>IDREF indicates that the value must be an ID typed attribute defined in the same document</li>
			<li>IDREFS is a whitespace separated list of IDREF values</li>
		</ul>
		<p:code type="text">&lt;!ATTLIST para id ID #REQUIRED&gt; &lt;!ATTLIST xref ref IDREF #REQUIRED&gt; </p:code>
	</p:slide>
	<p:slide xml:id="d1e641">
		<p:title>Defined…</p:title>
		<p:code type="text"> NameStartChar ::= ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#]|
			[#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF] NameChar ::=
			NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040] Name ::= NameStartChar (NameChar)* </p:code>
	</p:slide>
	<p:slide xml:id="d1e650">
		<p:title>ENTITY/ENTITIES</p:title>
		<ul>
			<li>ENTITY typed attributes must have the valid of the <em>name</em> of an entity defined in the DTD</li>
			<li>ENTITIES typed attributes must be a whitespace separated list of ENTITY values</li>
		</ul>
		<p:code type="text"> &lt;!ENTITY bold "bf"&gt; &lt;!ENTITY italic "it"&gt; &lt;!ENTITY underline "u"&gt; &lt;!ATTILIST emphasis type ENTITY&gt;
			&lt;!-- valid --&gt; &lt;em type="bold"&gt;important text&lt;/em&gt; &lt;!-- invalid --&gt; &lt;em type="strike"&gt;removed text&lt;/em&gt;
		</p:code>
	</p:slide>

	<p:slide xml:id="d1e671">
		<p:title>Attribute Occurrence</p:title>
		<table>
			<tbody>
				<tr>
					<th>Keyword</th>
					<th>Meaning</th>
				</tr>
				<tr>
					<td>#IMPLIED</td>
					<td>optional (no default)<br/>
						<em>must comply with type if present</em>
					</td>
				</tr>
				<tr>
					<td>#REQUIRED</td>
					<td>must be present<br/>  </td>
				</tr>
				<tr>
					<td>#FIXED</td>
					<td>optional but only value allowed and treated as a default</td>
				</tr>
			</tbody>
		</table>
	</p:slide>

	<p:slide xml:id="d1e726">
		<p:title>Attribute Occurrence (examples)</p:title>
		<table>
			<tr>
				<td colspan="2"><code>&lt;!ATTLIST listitem marker ENTITY #IMPLIED&gt;</code></td>
			</tr>
			<tr>
				<td><code>&lt;!-- valid --&gt;</code></td>
				<td><code>&lt;!-- invalid --&gt;</code></td>
			</tr>
			<tr>
				<td><code>&lt;listitem&gt;…&lt;/listitem&gt;</code></td>
				<td><code>&lt;listitem marker="23"&gt;…&lt;/listitem&gt;</code></td>
			</tr>
			<tr>
				<td colspan="2"><code>&lt;!ATTLIST img src CDATA #REQUIRED&gt; &lt;</code></td>
			</tr>
			<tr>
				<td><code>&lt;!-- valid --&gt;</code></td>
				<td><code>&lt;!-- invalid --&gt;</code></td>
			</tr>
			<tr>
				<td><code>&lt;img src="../logo.png"/&gt;</code></td>
				<td><code>&lt;img/&gt;</code></td>
			</tr>
			<tr>
				<td colspan="2"><code>&lt;!ATTLIST document version CDATA #FIXED "5.1"&gt; &lt;</code></td>
			</tr>
			<tr>
				<td><code>&lt;!-- valid --&gt;</code></td>
				<td><code>&lt;!-- invalid --&gt;</code></td>
			</tr>
			<tr>
				<td><code>&lt;document&gt;…&lt;/document&gt; &lt;</code><br/>
					<code>&lt;document version="5.1"&gt;…&lt;/document&gt;</code></td>
				<td><code>&lt;document version="5.0"&gt;…&lt;/document&gt;</code></td>
			</tr>

		</table>
	</p:slide>

	<p:slide xml:id="d1e828">
		<p:title>Entities</p:title>
		<p>There are three types of entity:</p>
		<ul>
			<li>Character entities</li>
			<li>General entities <ul>
					<li>Internal </li>
					<li>External</li>
				</ul>
			</li>
			<li>Parameter entities <ul>
					<li>Internal</li>
					<li>External</li>
				</ul>
			</li>
		</ul>
	</p:slide>

	<p:slide xml:id="d1e867">
		<p:title>Character entities</p:title>
		<p>A character entity is simply the numeric code for a character</p>
		<p:code type="text"> &amp;#x20AC; (€) &amp;#8364; (€)</p:code>
	</p:slide>

	<p:slide xml:id="d1e879">
		<p:title>General entities</p:title>
		<p>General entities are used in documents (not DTDS). They are defined in DTDs. We have three types of general entity</p>
		<ul>
			<li>Internal</li>
			<li>External (parsed)</li>
			<li>External (unparsed)*</li>
		</ul>
		<p> </p>
		<p>* <em>when we discuss notations</em></p>
	</p:slide>

	<p:slide xml:id="d1e908">
		<p:title>Internal general entities</p:title>
		<p:code type="text"> &lt;!ENTITY pound "£"&gt; &lt;!ENTITY copyright "© 2011-2016 Corbas Consulting Ltd"&gt; </p:code>
		<h4>Entity references</h4>
		<p:code type="xml">
			<para>This cost &amp;pound;250,000.00</para>
			<para>Slides copyright &amp;copyright;</para>
			<!-- Resolve to: -->
			<para>This cost £250,000.00</para>
			<para>Slides copyright © 2011-2016 Corbas Consulting Ltd</para>
		</p:code>
		<p>Defined as <code>&lt;!ENTITY <em>name "value"</em>&gt;</code></p>
		<p>Referenced as <code>&amp;name;</code></p>
		<p>
			<span>You can define markup this way but it's not a particularly good idea.</span>
		</p>
	</p:slide>

	<p:slide xml:id="d1e957">
		<p:title>External parsed entities</p:title>
		<p>Defined as <code>&lt;!ENTITY <em>name  SYSTEM "filename"</em>&gt;</code>
		</p>
		<p>Referenced as <code>&amp;name;</code>
		</p>
		<p:code type="text"> &lt;!ENTITY copyright SYSTEM "copyright.mod"&gt; &lt;!-- In copyright.mod --&gt; © 2011-2016 Corbas Consulting Ltd </p:code>
		<p:code type="xml">
			<!-- Referenced as -->
			<para>Slides copyright &amp;copyright;</para>
			<!-- Resolves to -->
			<para>Slides copyright ©2011-2016 Corbas Consulting Ltd</para>
		</p:code>
		<p>External entities often contain well-formed fragments of XML.</p>
	</p:slide>

	<p:slide xml:id="d1e998">
		<p:title>Notations</p:title>
		<ul>
			<li>Notations are relatively uncommon</li>
			<li>They represent a definition of an external data type</li>
			<li>Both <strong>PUBLIC</strong> &amp; <strong>SYSTEM </strong>notations can be defined</li>
		</ul>
		<p:code type="text"> &lt;!-- public notation --&gt; &lt;!NOTATION JPEG PUBLIC "JPEG 1.0"&gt; &lt;!-- public notation with system identifier --&gt;
			&lt;!NOTATION JPEG PUBLIC "JPEG 1.0" "image/jpeg"&gt; &lt;!-- system identifier only --&gt; &lt;!NOTATION JPEG SYSTEM "image/jpeg"&gt; </p:code>
		<p>The system identifier gives information an application can use to work out how to process the content</p>
	</p:slide>

	<p:slide xml:id="d1e1029">
		<p:title>Unparsed external entities</p:title>
		<ul>
			<li>We can discuss these now</li>
		</ul>
		<p:code type="text">&lt;!ENTITY entityName SYSTEM "uri" NDATA type&gt; </p:code>
		<ul>
			<li>The NDATA type references a defined notation</li>
			<li>The referenced URI is not parsed but the type is referenced</li>
		</ul>
	</p:slide>

	<p:slide xml:id="d1e1053">
		<p:title>Parameter entities</p:title>
		<ul>
			<li>Parameter entities are used to split up a DTD into parts</li>
			<li>Internal &amp; external entities (“general” entities) function in XML; parameter entities function in DTDs</li>
			<li>Parameter entities can also be internal or external.</li>
		</ul>
		<p>Defined as</p>        <p:code type="text">&gt;&lt;!ENTITY name % SYSTEM "filename"&gt;</p:code>
		<p>or</p>          <p:code>&lt;!ENTITY name % "DTD content"</p:code>
		<p>Referenced as <code>%name;</code>
		</p>
		
	</p:slide>
	<p:slide xml:id="d1e1090">
		<p:title>Internal parameter entities</p:title>
		<ul>
			<li>Define parts of a DTD for reuse</li>
			<li>Use to define shared content models</li>
		</ul>
		<p:code type="text">&lt;!ENTITY inline-models % "em | link | xref | field"&gt; &lt;!ELEMENT para (#PCDATA | %inline-models;)*&gt;</p:code>
	</p:slide>
	<p:slide xml:id="d1e1108">
		<p:title>External parameter entities</p:title>
		<ul>
			<li>External parameter entities reference external</li>
			<li>Can be used to build modular DTDS</li>
		</ul>
		<p:code type="text">
&lt;!-- lists.mod --&gt; 
&lt;!ELEMENT list (title? listitem+)&gt; 
&lt;!ELEMENT listitem (#PCDATA)&gt; 

&lt;!-- document.dtd--&gt; 
&lt;!ENTITY % list-model SYSTEM "lists.mod"&gt; 
%list-model;
		</p:code>
	</p:slide>
	
	<p:slide xml:id="d1e1126">
		<p:title>Reuse in DTDs</p:title>
		<ul>
			<li>Modules allow reuse</li>
			<li>You can override a definition by redefining <em>before</em> it <ul>
					<li>the first definition wins</li>
				</ul>
			</li>
			<li>Allows for module inclusion/variable models</li>
			<li>Two statements allow for conditional content:</li>
		</ul>
		<p:code type="text">
&lt;!ENTITY % html-model "INCLUDE"&gt; 
&lt;![%html-model; 
[ 
  &lt;!ENTITY % cals-model "IGNORE"&gt; 
	&lt;!ENTITY % include-html-tables SYSTEM "html-tables.mod"&gt; 
	%include-html-tables; 
]]&gt;

&lt;!ENTITY % cals-model "INCLUDE"&gt; 
&lt;![%cals-model; 
[
  &lt;!ENTITY % include-cals-tables SYSTEM "cals-tables.mod"&gt; 
  %include-cals-tables; 
]]&gt;
		</p:code>
	</p:slide>

	<p:slide xml:id="d1e1159">
		<p:title>Documentation in DTDs</p:title>
		<ul>
			<li>We only have comments</li>
			<li>Structure them well</li>
			<li>Consider an introductory block</li>
			<li>Oxygen uses the last comment block before an entry as popup help</li>
		</ul>
	</p:slide>
	
	<p:slide xml:id="d1e1181">
		<p:title>Summary</p:title>
		<ul>
			<li>We have discussed <ul>
					<li>basic DTD syntax</li>
					<li>content models</li>
					<li>entities</li>
					<li>notations</li>
					<li>modularity</li>
				</ul>
			</li>
		</ul>
	</p:slide>



</p:div>